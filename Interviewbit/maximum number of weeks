Here, 1st case:
suppose we have more than one max element then they will concurrently and we will be able to complete our task. 
eg.   1,3,4,9 ,9 :- 9, 9 work together till they become 4 and same continues so we can complete whole tasks.

2n case :
p -> max milestone
q -> second milestone 
r -> rest ;

p       q       r
p-1     q       r-1
.
.
.
.
p - (p-q) q    r - (p - q) :- Then q q become and same story as above.

if(q + r >= p) then they all can be done.
if(q + r < p ) then p is max and we can not do all pairing :-
  ans = 2*(q + r)  + 1;
  
  
  class Solution {
public:
    long long numberOfWeeks(vector<int>& a) {
        int n = a.size();
        if(n == 1) return 1;
        sort(a.begin(), a.end());
        long long sum = 0;
        for(auto &x: a){
            sum += x;
        }
        if(a[n-1] == a[n-2]) return sum;
        
        if(sum - a[n-1] >= a[n-1]){
            return sum;
        }
        else{
            return 2*(sum - a[n-1]) + 1;
        }
    }
    
};
