Here, we have certain deadline and the profit associated with them. 
so first sort them with deadline.
maintain a min priority queue and now element add either its fits or we remove the element which costed me least profit.

vector<int> JobScheduling(Job arr[], int n) 
{ 
    auto cmp = [&](const Job& a, const Job& b){
        if(a.dead == b.dead){
            return a.profit > b.profit;
        }
        return a.dead < b.dead;  
    };
    sort(arr, arr + n, cmp);

    int t = 0, profit = 0;        
    priority_queue<int> pq;

    for(int i = 0; i < n; i++){
        t++;
        profit += arr[i].profit;
        pq.push(-arr[i].profit);
        if(t > arr[i].dead){
            t--;
            profit += pq.top();
            pq.pop();
        }
    }
    return {pq.size(), profit};
    } 
